"""Առաջադրանք 2. Կարմա
Ինչ անել
Բուդդայական ծրագրավորողներից մեկը որոշել է ստեղծել իր սեփական կյանքի սիմուլյատորը, որում լուսավորության հասնելու համար անհրաժեշտ է հավաքել 500 կարմա միավոր (սա հաստատուն է): 

Ամեն օր կանչվում է հատուկ գործառույթ one_day(), որը վերադարձնում է կարմայի քանակը 1-ից մինչև 7 և կարող է բացառություններից մեկը նետել 10-ից 1-ի հավանականությամբ.

KillError
DrunkError
CarCrashError
GluttonyError
DepressionError
(Դուք ինքներդ պետք է բացառություններ ստեղծեք՝ օգտագործելով ժառանգությունը Exception-ից):

Գրեք այսպիսի ծրագիր
Գործառույթը փաթաթեք անսահման օղակով, որից դուրս գալը հնարավոր է միայն այն դեպքում, երբ կարման կուտակվում է մշտական ​​մակարդակի վրա: Գործընթացի բացառությունները մշակեք և դրանք գրեք առանձին karma.log-ում:

Ինչ է գնահատվում
Հաշվարկի արդյունքը ճիշտ է։
Մոդելներն իրականացվում են OOP ոճով, հիմնական ֆունկցիոնալությունը նկարագրված է դասի մեթոդներով և անհատական ​​գործառույթներով։
Դասեր գրելիս պահպանվում են OOP-ի հիմնական սկզբունքները՝ ինկապսուլյացիա, ժառանգականություն և պոլիմորֆիզմ:
Սեթերներն ու ստացողները օգտագործվում են մասնավոր ատրիբուտների արժեքներ ստանալու և սահմանելու համար:
Ժառանգությունն օգտագործվում է գոյություն ունեցող դասի հիման վրա նոր դաս ստեղծելու համար:
Արդյունքների ստացման գործընթացի մասին հաղորդագրությունները իմաստալից և հասկանալի են օգտագործողի համար:
Փոփոխականները, ֆունկցիաները և դասերի սեփական մեթոդներն ունեն իմաստալից անուններ, այլ ոչ թե a, b, c, d:
Օգտագործված ֆայլերի անվանումները համապատասխանում են առաջադրանքում նշվածներին:
"""
